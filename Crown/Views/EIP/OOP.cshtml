@{
    ViewBag.Title = "";
    Layout = "EIP_Layout";
}

<div class="row text-center" style="width:100%">
    <div style="width:50%; float:none; margin:0 auto">
        <br />
        <h4>  OOP(Object Oriented Programming) </h4>
        <br />
        <p>OOP는 한국말로 객체 지향 프로그래밍 이라고 합니다.</p>
        <p>정말 많이 들어보았을 텐데, 한번 자세히 알아보도록 합시다.</p>
        <p>객체 지향 프로그래밍은 각 객체를 조립해서 프로그래밍 하는 패턴 입니다.</p>
        <p>좀 더 효율적인 프로그래밍 방식이 필요하여 등장하게 되었습니다.</p>
        <p>객체 지향의 4가지 특징이 있는데요. 캡슐화, 추상화, 다형성, 상속성 입니다.</p>
        <p>먼저 추상화부터 알아보도록 하겠습니다.</p>
        <p>A객체는 한식점, B객체는 일식점 이라고 가정해보겠습니다.</p>
        <p>추상화는 두 객체를 묶어 음식점이라고 가정하는 것을 추상화라고 합니다.</p>
        <p>즉, 공통의 속성이나 기능을 묶어 이름을 붙이는 것이죠.</p>
        <p>여기서 음식점이라고 하면 정확하게 어느 음식점을 의미하는건지는 모릅니다.</p>
        <p>이를 추상화 라고 표현 합니다.</p>
        <p>이제 하나의 음식점이 생겼으므로, 이 식당 저 식당 찾아볼 필요가 줄었죠?</p>
        <p>원래는 한식점 일식점 2번을 방문해서 정보를 얻었다고 한다면</p>
        <p>음식점을 통해서 1번에 2가지 정보를 얻을 수 있게 되었습니다.</p>
        <p>음식점에서 A식당, B식당의 정보를 얻고 방문하면 됩니다.</p>
        <p>복잡성이 낮아졌고 이는 생산성으로 직결됩니다. 추상화의 장점입니다.</p>
        <p>캡슐화는 일반적으로 연관 있는 변수와 함수를 클래스로 묶는 작업을 말합니다.</p>
        <p>하나의 클래스 안에 필드들과 메소드들을 정의하는 행위를 캡슐화 라고 합니다.</p>
        <p>단, 클래스안에 포함된 필드와 메소드들은 클래스의 특성과 관련이 있어야 합니다.</p>
        <p>재밌는점이 캡슐화를 하게 되면 따라오는 기능이 있습니다.</p>
        <p>바로 정보 은닉화 인데요.</p>
        <p>예를 들어서 우리가 약국에 가면 주로 캡슐에 약을 담아서 줍니다.</p>
        <p>캡슐안에 있는 가루약들이 필드와 메소드가 되는 것이고, 가루약을 캡슐로 감싸면 캡슐화가 됩니다.</p>
        <p>캡슐로 가루약을 감싸안으면 가루약이 보이지 않죠? 이걸 은닉화라고 합니다.</p>
        <p>약을 만드는 약사(개발자)는 가루약의 정보를 알 수 있지만 약을 먹는 사람(유저)은 가루약의 정보를 알 수 없습니다. </p>
        <p>이는 프로그램에 대입해보면 외부에서 사용자가 중요한 데이터에 접근할 수 없는 것과 같다고 볼 수 있습니다.</p>
        <p>상속이란 클래스를 정의할 때 기존 클래스가 가지고 있는 필드, 메소드 등등 을 물려 받는 것을 의미합니다.</p>
        <p>이미 구현된 것들을 기존 클래스로부터 물려받고 재사용을 합니다.</p>
        <p>부모님이 달리기를 잘한다고 가정 합시다.</p>
        <p>프로그래밍에서 내가 부모님을 상속 받으면 달리기를 배우지 않아도 달리기를 할 수 있습니다.</p>
        <p>나한테 달리기를 가르치지 않아도 되므로 재사용성이 상승하는 경우 입니다.</p>
        <p>이를 상속이라고 합니다.</p>
        <p>다형성이란 부모와 형태는 같지만 자세히 들여다 보면</p>
        <p>자식의 고유 특징이 저마다 모두 다르다는 것을 의미합니다.</p>
        <p>부모가 쌍커풀이 진하게 있지만 자식은 속상커풀일 경우 다형성이 적용 됩니다.</p>
        <p>프로그래밍적으로 부모와 자식의 메소드 이름은 같지만 기능은 다를 수 있다는 겁니다.</p>
        <p>상속은 받지만 안에 내용은 다를 수 있다는게 핵심입니다.</p>
        <p>문법적으로 접근하면 부모 메서드에는 접근 제한자 뒤에 virtual 을 선언하고</p>
        <p>자식 메서드 접근 제한자 뒤에 override 를 선언합니다.</p>
        <br />
        <br />


    </div>
</div>